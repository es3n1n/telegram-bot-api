name: Docker multi-arch build and push

on:
  push:
    branches:
      - master

jobs:
  prepare:
    name: Prepare build context and version info
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.version.outputs.image_tag }}
      version: ${{ steps.version.outputs.version }}
      upstream_ref: ${{ steps.upstream.outputs.ref }}
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Set upstream reference
        id: upstream
        run: |
          UPSTREAM_REF="8be1f0058c8f6938418a82092363ffb58e7222eb"
          echo "ref=$UPSTREAM_REF" >> $GITHUB_OUTPUT
          echo "Using upstream reference: $UPSTREAM_REF"

      - name: Checkout upstream repo
        uses: actions/checkout@v4
        with:
          repository: tdlib/telegram-bot-api
          path: telegram-bot-api
          submodules: recursive
          ref: ${{ steps.upstream.outputs.ref }}

      - name: Get version info
        id: version
        run: |
          VERSION=$(cat telegram-bot-api/CMakeLists.txt | grep TelegramBotApi | cut -d " " -f3)
          VERSION=$(echo "$VERSION" | awk '{print tolower($0)}')
          
          IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/telegram-bot-api
          IMAGE_TAG=$(echo "$IMAGE_TAG" | awk '{print tolower($0)}')
          
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          echo "Image tag: $IMAGE_TAG"
          echo "Version: $VERSION"

  build:
    name: Build Docker image (${{ matrix.arch }})
    runs-on: ubuntu-latest
    needs: prepare
    env:
      IMAGE_TAG: ${{ needs.prepare.outputs.image_tag }}
      VERSION: ${{ needs.prepare.outputs.version }}
      UPSTREAM_REF: ${{ needs.prepare.outputs.upstream_ref }}
      ALPINE_VERSION: '3.21'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        arch:
          - linux/386
          - linux/amd64
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64
          - linux/ppc64le

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Checkout upstream repo
        uses: actions/checkout@v4
        with:
          repository: tdlib/telegram-bot-api
          path: telegram-bot-api
          submodules: recursive
          ref: ${{ env.UPSTREAM_REF }}

      - name: Apply patches
        run: |
          chmod +x ./apply-patches.sh
          ./apply-patches.sh ./patches/td ./telegram-bot-api/td

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set build parameters
        id: build-params
        run: |
          # Get available CPUs, use 75% for build, minimum 2
          AVAILABLE_CPUS=$(nproc)
          OPTIMAL_NPROC=$(( AVAILABLE_CPUS * 3 / 4 ))
          OPTIMAL_NPROC=$(( OPTIMAL_NPROC > 1 ? OPTIMAL_NPROC : 2 ))
          
          # ARM architectures might need special handling
          if [[ "${{ matrix.arch }}" == *"arm"* ]]; then
            # For ARM, be more conservative with resources
            OPTIMAL_NPROC=$(( OPTIMAL_NPROC > 2 ? 2 : OPTIMAL_NPROC ))
          fi
          
          echo "nproc=${OPTIMAL_NPROC}" >> $GITHUB_OUTPUT
          
          PLATFORM_SUFFIX=$(echo "${{ matrix.arch }}" | tr '/' '-')
          echo "platform_suffix=${PLATFORM_SUFFIX}" >> $GITHUB_OUTPUT
          
          echo "Building for ${{ matrix.arch }} with $OPTIMAL_NPROC processes"
          echo "Using image tag: $IMAGE_TAG:$VERSION-$PLATFORM_SUFFIX"

      - name: Build and push platform-specific image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.arch }}
          build-args: |
            ALPINE_VERSION=${{ env.ALPINE_VERSION }}
            nproc=${{ steps.build-params.outputs.nproc }}
          push: true
          tags: ${{ env.IMAGE_TAG }}:${{ env.VERSION }}-${{ steps.build-params.outputs.platform_suffix }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-manifest:
    name: Create and push multi-arch manifest
    runs-on: ubuntu-latest
    needs: [prepare, build]
    permissions:
      packages: write
    env:
      IMAGE_TAG: ${{ needs.prepare.outputs.image_tag }}
      VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create and push multi-arch manifest
        run: |
          echo "Creating multi-arch manifest for $IMAGE_TAG:$VERSION and $IMAGE_TAG:latest"
          
          export DOCKER_CLI_EXPERIMENTAL=enabled
          
          docker pull "$IMAGE_TAG:$VERSION-linux-386" || echo "Failed to pull 386"
          docker pull "$IMAGE_TAG:$VERSION-linux-amd64" || echo "Failed to pull amd64"
          docker pull "$IMAGE_TAG:$VERSION-linux-arm-v6" || echo "Failed to pull armv6"
          docker pull "$IMAGE_TAG:$VERSION-linux-arm-v7" || echo "Failed to pull armv7"
          docker pull "$IMAGE_TAG:$VERSION-linux-arm64" || echo "Failed to pull arm64"
          docker pull "$IMAGE_TAG:$VERSION-linux-ppc64le" || echo "Failed to pull ppc64le"
          
          echo "Available tags:"
          docker image ls "$IMAGE_TAG"
          
          docker buildx imagetools create -t "$IMAGE_TAG:$VERSION" \
            "$IMAGE_TAG:$VERSION-linux-386" \
            "$IMAGE_TAG:$VERSION-linux-amd64" \
            "$IMAGE_TAG:$VERSION-linux-arm-v6" \
            "$IMAGE_TAG:$VERSION-linux-arm-v7" \
            "$IMAGE_TAG:$VERSION-linux-arm64" \
            "$IMAGE_TAG:$VERSION-linux-ppc64le"
          
          docker buildx imagetools create -t "$IMAGE_TAG:latest" \
            "$IMAGE_TAG:$VERSION-linux-386" \
            "$IMAGE_TAG:$VERSION-linux-amd64" \
            "$IMAGE_TAG:$VERSION-linux-arm-v6" \
            "$IMAGE_TAG:$VERSION-linux-arm-v7" \
            "$IMAGE_TAG:$VERSION-linux-arm64" \
            "$IMAGE_TAG:$VERSION-linux-ppc64le"
